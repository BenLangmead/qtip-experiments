diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/AlignmentResult.h snap/SNAPLib/AlignmentResult.h
--- tmp/snap/SNAPLib/AlignmentResult.h	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/AlignmentResult.h	2015-08-05 14:10:01.000000000 -0400
@@ -46,6 +46,52 @@ inline const char *AlignmentResultToStri
     }
 }
 
+// Features useful for predicting mapping quality
+struct TS_MapqEstimationFeatures {
+	
+	TS_MapqEstimationFeatures() :
+	bestScore(0),
+	secondBestScore(0),
+	probabilityOfAllCandidates(0.0),
+	probabilityOfBestCandidate(0.0),
+	popularSeedsSkipped(0),
+	popularSeedsSkippedPair(0),
+	countOfHashTableLookups(0),
+	hitsPerLookup(0.0f),
+	hitsPerLookupPair(0.0f) { }
+	
+	void init(unsigned _bestScore,
+			  unsigned _secondBestScore,
+			  double _probabilityOfAllCandidates,
+			  double _probabilityOfBestCandidate,
+			  unsigned _popularSeedsSkipped,
+			  unsigned _popularSeedsSkippedPair,
+			  _int64 _countOfHashTableLookups,
+			  float _hitsPerLookup,
+			  float _hitsPerLookupPair)
+	{
+		bestScore = _bestScore;
+		secondBestScore = _secondBestScore;
+		probabilityOfAllCandidates = _probabilityOfAllCandidates;
+		probabilityOfBestCandidate = _probabilityOfBestCandidate;
+		popularSeedsSkipped = _popularSeedsSkipped;
+		popularSeedsSkippedPair = _popularSeedsSkippedPair;
+		countOfHashTableLookups = _countOfHashTableLookups;
+		hitsPerLookup = _hitsPerLookup;
+		hitsPerLookupPair = _hitsPerLookupPair;
+	}
+
+	unsigned bestScore;
+	unsigned secondBestScore;
+	double probabilityOfAllCandidates;
+	double probabilityOfBestCandidate;
+	unsigned popularSeedsSkipped;
+	unsigned popularSeedsSkippedPair;
+	_int64 countOfHashTableLookups;
+	float hitsPerLookup;
+	float hitsPerLookupPair;
+};
+
 struct SingleAlignmentResult {
 	AlignmentResult status;
 
@@ -54,6 +100,7 @@ struct SingleAlignmentResult {
     int             score;		// score of each end if matched
 
     int             mapq;		// mapping quality, encoded like a Phred score (but as an integer, not ASCII Phred + 33).
+	TS_MapqEstimationFeatures features; // features that might help an external tool estimate MAPQ; not exhaustive
 
     static int compareByContigAndScore(const void *first, const void *second);      // qsort()-style compare routine
     static int compareByScore(const void *first, const void *second);               // qsort()-style compare routine
@@ -81,6 +128,8 @@ struct PairedAlignmentResult {
 	int score[NUM_READS_PER_PAIR];              // score of each end if matched
 
 	int mapq[NUM_READS_PER_PAIR];               // mapping quality of each end, encoded like a Phred score (but as an integer, not ASCII Phred + 33).
+	
+	TS_MapqEstimationFeatures features[NUM_READS_PER_PAIR]; // features that might help an external tool estimate MAPQ; not exhaustive
 
 	bool fromAlignTogether;                     // Was this alignment created by aligning both reads together, rather than from some combination of single-end aligners?
 	bool alignedAsPair;                         // Were the reads aligned as a pair, or separately?
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/Bam.cpp snap/SNAPLib/Bam.cpp
--- tmp/snap/SNAPLib/Bam.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/Bam.cpp	2015-07-28 15:04:32.000000000 -0400
@@ -682,7 +682,9 @@ public:
     virtual bool writeRead(
         const ReaderContext& context, LandauVishkinWithCigar * lv, char * buffer, size_t bufferSpace,
         size_t * spaceUsed, size_t qnameLen, Read * read, AlignmentResult result,
-        int mapQuality, GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int * o_addFrontClipping,
+        int mapQuality,
+        const TS_MapqEstimationFeatures& features,
+        GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int * o_addFrontClipping,
         bool hasMate = false, bool firstInPair = false, Read * mate = NULL,
         AlignmentResult mateResult = NotFound, GenomeLocation mateLocation = 0, Direction mateDirection = FORWARD,
         bool alignedAsPair = false) const;
@@ -839,6 +841,7 @@ BAMFormat::writeRead(
     Read * read,
     AlignmentResult result,
     int mapQuality,
+    const TS_MapqEstimationFeatures& features,
     GenomeLocation genomeLocation,
     Direction direction,
     bool secondaryAlignment,
@@ -1022,6 +1025,7 @@ BAMFormat::writeRead(
     nm->tag[0] = 'N'; nm->tag[1] = 'M'; nm->val_type = 'C';
     *(_uint8*)nm->value() = (_uint8)editDistance;
     auxLen += (unsigned) nm->size();
+	// BTL: TODO: ZT:Z
 
     if (NULL != spaceUsed) {
         *spaceUsed = bamSize;
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/BaseAligner.cpp snap/SNAPLib/BaseAligner.cpp
--- tmp/snap/SNAPLib/BaseAligner.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/BaseAligner.cpp	2015-08-05 14:07:42.000000000 -0400
@@ -289,7 +289,7 @@ Return Value:
     primaryResult->score = UnusedScoreValue;
     primaryResult->status = NotFound;
 
-    unsigned lookupsThisRun = 0;
+    lookupsThisRun = hitsThisRun = 0;
 
     popularSeedsSkipped = 0;
 
@@ -471,6 +471,7 @@ Return Value:
 
         nHashTableLookups++;
         lookupsThisRun++;
+        hitsThisRun += (nHits[FORWARD] + nHits[RC]);
 
 
 #ifdef  _DEBUG
@@ -764,6 +765,16 @@ Return Value:
                 primaryResult->score = bestScore;
                 if (bestScore <= maxK) {
                     primaryResult->location = bestScoreGenomeLocation;
+					float hitsPerLookup = (float)hitsThisRun / lookupsThisRun;
+					primaryResult->features.init(bestScore,
+												 secondBestScore,
+												 probabilityOfAllCandidates,
+												 probabilityOfBestCandidate,
+												 popularSeedsSkipped,
+												 0,
+												 lookupsThisRun,
+												 hitsPerLookup,
+												 0);
                     primaryResult->mapq = computeMAPQ(probabilityOfAllCandidates, probabilityOfBestCandidate, bestScore, popularSeedsSkipped);
                     if (primaryResult->mapq >= MAPQ_LIMIT_FOR_SINGLE_HIT) {
                         primaryResult->status = SingleHit;
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/BaseAligner.h snap/SNAPLib/BaseAligner.h
--- tmp/snap/SNAPLib/BaseAligner.h	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/BaseAligner.h	2015-08-05 11:12:27.000000000 -0400
@@ -136,6 +136,9 @@ private:
     _int64 nReadsIgnoredBecauseOfTooManyNs;
     _int64 nIndelsMerged;
 
+	unsigned lookupsThisRun;
+	_int64 hitsThisRun;
+
     //
     // A bitvector indexed by offset in the read indicating whether this seed is used.
     // This is here to avoid doing a memory allocation in the aligner.
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/ChimericPairedEndAligner.cpp snap/SNAPLib/ChimericPairedEndAligner.cpp
--- tmp/snap/SNAPLib/ChimericPairedEndAligner.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/ChimericPairedEndAligner.cpp	2015-08-05 09:03:57.000000000 -0400
@@ -188,6 +188,7 @@ void ChimericPairedEndAligner::align(
 			*(resultCount[r]) = singleEndSecondaryResultsThisTime;
 
 			result->status[r] = singleResult.status;
+			result->features[r] = singleResult.features;
 			result->mapq[r] = singleResult.mapq / 3;   // Heavy quality penalty for chimeric reads
 			result->direction[r] = singleResult.direction;
 			result->location[r] = singleResult.location;
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/CommandProcessor.cpp snap/SNAPLib/CommandProcessor.cpp
--- tmp/snap/SNAPLib/CommandProcessor.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/CommandProcessor.cpp	2015-08-04 10:54:20.000000000 -0400
@@ -162,7 +162,8 @@ void RunDaemonMode(int argc, const char 
 
 void ProcessTopLevelCommands(int argc, const char **argv)
 {
-	fprintf(stderr, "Welcome to SNAP version %s.\n\n", SNAP_VERSION);       // Can't use WriteStatusMessage, because we haven't parsed args yet to determine if -hdp is specified.  Just stick with stderr.
+	fprintf(stderr, "Welcome to SNAP version %s.\n", SNAP_VERSION);       // Can't use WriteStatusMessage, because we haven't parsed args yet to determine if -hdp is specified.  Just stick with stderr.
+	fprintf(stderr, "(With minor modifications by Ben Langmead to fit into tandem simulation framework)\n\n");
 
 	InitializeSeedSequencers();
 
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/FileFormat.h snap/SNAPLib/FileFormat.h
--- tmp/snap/SNAPLib/FileFormat.h	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/FileFormat.h	2015-07-28 15:03:35.000000000 -0400
@@ -92,7 +92,9 @@ public:
     virtual bool writeRead(
         const ReaderContext& context, LandauVishkinWithCigar * lv, char * buffer, size_t bufferSpace,
         size_t * spaceUsed, size_t qnameLen, Read * read, AlignmentResult result,
-        int mapQuality, GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int* o_addFrontClipping,
+        int mapQuality,
+        const TS_MapqEstimationFeatures& features,
+        GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int* o_addFrontClipping,
         bool hasMate = false, bool firstInPair = false, Read * mate = NULL, 
         AlignmentResult mateResult = NotFound, GenomeLocation mateLocation = 0, Direction mateDirection = FORWARD,
         bool alignedAsPair = false) const = 0; 
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/IntersectingPairedEndAligner.cpp snap/SNAPLib/IntersectingPairedEndAligner.cpp
--- tmp/snap/SNAPLib/IntersectingPairedEndAligner.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/IntersectingPairedEndAligner.cpp	2015-08-05 14:07:33.000000000 -0400
@@ -852,9 +852,22 @@ doneScoring:
 #endif  // DEBUG
         }
     } else {
+		float hits_per_lookup_pair = (float)(totalHashTableHits[0][FORWARD] + totalHashTableHits[0][RC] +
+											 totalHashTableHits[1][FORWARD] + totalHashTableHits[1][RC]) /
+											(countOfHashTableLookups[0] + countOfHashTableLookups[1]);
         for (unsigned whichRead = 0; whichRead < NUM_READS_PER_PAIR; whichRead++) {
             result->location[whichRead] = bestResultGenomeLocation[whichRead];
             result->direction[whichRead] = bestResultDirection[whichRead];
+			float hits_per_lookup = (float)(totalHashTableHits[whichRead][FORWARD] + totalHashTableHits[whichRead][RC]) / countOfHashTableLookups[whichRead];
+			result->features[whichRead].init(bestResultScore[whichRead],
+											 0xffff,
+											 probabilityOfAllPairs,
+											 probabilityOfBestPair,
+											 popularSeedsSkipped[whichRead],
+											 popularSeedsSkipped[0] + popularSeedsSkipped[1],
+											 countOfHashTableLookups[whichRead],
+											 hits_per_lookup,
+											 hits_per_lookup_pair);
             result->mapq[whichRead] = computeMAPQ(probabilityOfAllPairs, probabilityOfBestPair, bestResultScore[whichRead], popularSeedsSkipped[0] + popularSeedsSkipped[1]);
             result->status[whichRead] = result->mapq[whichRead] > MAPQ_LIMIT_FOR_SINGLE_HIT ? SingleHit : MultipleHits;
             result->score[whichRead] = bestResultScore[whichRead];
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/ReadWriter.cpp snap/SNAPLib/ReadWriter.cpp
--- tmp/snap/SNAPLib/ReadWriter.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/ReadWriter.cpp	2015-07-28 15:36:56.000000000 -0400
@@ -174,7 +174,9 @@ SimpleReadWriter::writeReads(
             finalLocations[whichResult] = results[whichResult].location;
 
             while (!format->writeRead(context, &lvc, buffer + used, size - used, &usedBuffer[whichResult], read->getIdLength(), read, results[whichResult].status,
-                results[whichResult].mapq, finalLocations[whichResult], results[whichResult].direction, (whichResult > 0) || !firstIsPrimary, &addFrontClipping)) {
+                results[whichResult].mapq,
+                results[whichResult].features,
+                finalLocations[whichResult], results[whichResult].direction, (whichResult > 0) || !firstIsPrimary, &addFrontClipping)) {
 
                 if (0 == addFrontClipping) {
                     blewBuffer = true;
@@ -352,7 +354,9 @@ SimpleReadWriter::writePairs(
                     int addFrontClipping = 0;
 
                     while (!format->writeRead(context, &lvc, buffer + used + tentativeUsed, size - used - tentativeUsed, &usedBuffer[firstOrSecond][whichAlignmentPair],
-                        idLengths[whichRead], reads[whichRead], result[whichAlignmentPair].status[whichRead], result[whichAlignmentPair].mapq[whichRead], locations[whichRead], result[whichAlignmentPair].direction[whichRead],
+                        idLengths[whichRead], reads[whichRead], result[whichAlignmentPair].status[whichRead], result[whichAlignmentPair].mapq[whichRead],
+                        result[whichAlignmentPair].features[whichRead],
+                        locations[whichRead], result[whichAlignmentPair].direction[whichRead],
                         whichAlignmentPair != 0 || !firstIsPrimary, &addFrontClipping, true, writeOrder[firstOrSecond] == 0,
                         reads[1 - whichRead], result[whichAlignmentPair].status[1 - whichRead], locations[1 - whichRead], result[whichAlignmentPair].direction[1 - whichRead],
                         result[whichAlignmentPair].alignedAsPair)) {
@@ -413,7 +417,9 @@ SimpleReadWriter::writePairs(
                 int cumulativePositiveAddFrontClipping = 0;
 
                 while (!format->writeRead(context, &lvc, buffer + used, size - used, &usedBuffer[whichRead][nResults + whichAlignment], reads[whichRead]->getIdLength(),
-                    reads[whichRead], singleResults[whichRead][whichAlignment].status, singleResults[whichRead][whichAlignment].mapq, location, singleResults[whichRead][whichAlignment].direction,
+                    reads[whichRead], singleResults[whichRead][whichAlignment].status, singleResults[whichRead][whichAlignment].mapq,
+                    singleResults[whichRead][whichAlignment].features,
+                    location, singleResults[whichRead][whichAlignment].direction,
                     true, &addFrontClipping)) {
 
                     if (0 == addFrontClipping) {
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/SAM.cpp snap/SNAPLib/SAM.cpp
--- tmp/snap/SNAPLib/SAM.cpp	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/SAM.cpp	2015-08-16 20:31:16.000000000 -0400
@@ -1123,6 +1123,7 @@ SAMFormat::writeRead(
     Read * read,
     AlignmentResult result, 
     int mapQuality,
+    const TS_MapqEstimationFeatures& features,
     GenomeLocation genomeLocation,
     Direction direction,
     bool secondaryAlignment,
@@ -1249,7 +1250,36 @@ SAMFormat::writeRead(
             readGroupString = read->getReadGroup();
         }
     }
-    int charsInString = snprintf(buffer, bufferSpace, "%.*s\t%d\t%s\t%u\t%d\t%s\t%s\t%u\t%lld\t%.*s\t%.*s%s%.*s%s%s\tPG:Z:SNAP%s%.*s\n",
+	
+	const char* ztzSeparator = "";
+	const char* ztzString = "";
+	char ztzbuf[1024];
+	
+	if((flags & 4) == 0) {
+		// ZT:Z
+		char diffbuf[100];
+		if(features.secondBestScore != 0xffff) {
+			snprintf(diffbuf, 40, "%d", -(features.secondBestScore - features.bestScore));
+		} else {
+			diffbuf[0] = 'N';
+			diffbuf[1] = 'A';
+			diffbuf[2] = '\0';
+		}
+		ztzSeparator = "\tZT:Z:";
+		snprintf(ztzbuf, 1024, "%d,%s,%.8e,%d,%d,%lld,%d,%d",
+				 -features.bestScore,
+				 diffbuf,
+				 features.probabilityOfBestCandidate /
+					(features.probabilityOfAllCandidates > 0 ? features.probabilityOfAllCandidates : 1),
+				 features.popularSeedsSkipped,
+				 features.popularSeedsSkippedPair,
+				 features.countOfHashTableLookups,
+				 (int)(features.hitsPerLookup+0.5),
+				 (int)(features.hitsPerLookupPair+0.5));
+		ztzString = ztzbuf;
+	}
+	
+    int charsInString = snprintf(buffer, bufferSpace, "%.*s\t%d\t%s\t%u\t%d\t%s\t%s\t%u\t%lld\t%.*s\t%.*s%s%.*s%s%s\tPG:Z:SNAP%s%.*s%s%s\n",
         qnameLen, read->getId(),
         flags,
         contigName,
@@ -1263,7 +1293,8 @@ SAMFormat::writeRead(
         fullLength, quality,
         aux != NULL ? "\t" : "", auxLen, aux != NULL ? aux : "",
         readGroupSeparator, readGroupString,
-        nmString, rglineAuxLen, rglineAux);
+        nmString, rglineAuxLen, rglineAux,
+        ztzSeparator, ztzString);
 
     if (charsInString > bufferSpace) {
         //
diff -rupN -x Xcode -x .git tmp/snap/SNAPLib/SAM.h snap/SNAPLib/SAM.h
--- tmp/snap/SNAPLib/SAM.h	2015-07-28 15:15:02.000000000 -0400
+++ snap/SNAPLib/SAM.h	2015-07-28 15:03:56.000000000 -0400
@@ -164,7 +164,9 @@ public:
     virtual bool writeRead(
         const ReaderContext& context, LandauVishkinWithCigar * lv, char * buffer, size_t bufferSpace,
         size_t * spaceUsed, size_t qnameLen, Read * read, AlignmentResult result, 
-        int mapQuality, GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int* o_addFrontClipping,
+        int mapQuality,
+        const TS_MapqEstimationFeatures& features,
+        GenomeLocation genomeLocation, Direction direction, bool secondaryAlignment, int* o_addFrontClipping,
         bool hasMate = false, bool firstInPair = false, Read * mate = NULL, 
         AlignmentResult mateResult = NotFound, GenomeLocation mateLocation = 0, Direction mateDirection = FORWARD,
         bool alignedAsPair = false) const; 
