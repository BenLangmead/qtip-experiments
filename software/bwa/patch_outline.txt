We just add a few fields to the mem_aln_t structure in bwamem.h: pair_score, pair_sub, pair_nsub

typedef struct { // This struct is only used for the convenience of API.
	int64_t pos;     // forward strand 5'-end mapping position
	int rid;         // reference sequence index in bntseq_t; <0 for unmapped
	int flag;        // extra flag
	uint32_t is_rev:1, mapq:8, NM:23; // is_rev: whether on the reverse strand; mapq: mapping quality; NM: edit distance
	int n_cigar;     // number of CIGAR operations
	uint32_t *cigar; // CIGAR in the BAM encoding: opLen<<4|op; op to integer mapping: MIDSH=>01234
	char *XA;        // alternative mappings

	int score, sub;
	int pair_score, pair_sub, pair_nsub;
} mem_aln_t;


We add this little bit of initialization to the mem_sam_pe function in bwamem_pair.c:

        // add
		h[0].pair_score = h[1].pair_score = a[0].a[0].score + a[1].a[0].score;
		h[0].pair_sub = h[1].pair_sub = subo;
		h[0].pair_nsub = h[1].pair_nsub = n_sub;
		// end addition
		mem_aln2sam(bns, &str, &s[0], 1, &h[0], 0, &h[1], opt->flag&MEM_F_SOFTCLIP); s[0].sam = strdup(str.s); str.l = 0;
		mem_aln2sam(bns, &str, &s[1], 1, &h[1], 0, &h[0], opt->flag&MEM_F_SOFTCLIP); s[1].sam = str.s;

Then we add a little code to print out these new extra fields in mem_aln2sam in bwamem.c:

	if (p->pair_score > 0) { kputsn("\tZP:i:", 6, str); kputw(p->pair_score, str); }
	if (p->pair_sub > 0) { kputsn("\tZp:i:", 6, str); kputw(p->pair_sub, str); }


UPDATE:

I think maybe:

		h[0].pair_score = h[1].pair_score = a[0].a[0].score + a[1].a[0].score;

should actually be:

		h[0].pair_score = h[1].pair_score = o;
